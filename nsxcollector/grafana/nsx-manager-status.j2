{# be aware, for quote inside a value like on query, you must add \ before each quote #}
{
    "type": "{{type}}",
    "title": "{{name}}",
    "gridPos": {
              "x": 13,
              "y": 0,
              "h": 6,
              "w": 11
            },
    "options": {
        "reduceOptions": {
        "values": false,
        "calcs": ["lastNotNull"],
        "fields": "/.*/"
        },
        "orientation": "auto",
        "textMode": "auto",
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto"
    },
    "transformations": [{
                "id": "filterFieldsByName",
                "options": {
                  "include": {
                    "names": [
                      "CC-Status status {{node_ip}}",
                      "MC-Status status {{node_ip}}",
                      "BKP-Config enabled {{node_ip}}",
                      "BKP-LastStatus status {{node_ip}}",
                      "MC-Nodes DOWN {{node_ip}}"
                    ]
                  }
                }
              }],
    "fieldConfig": {
        "defaults": {
          "mappings": [
            {
              "type": "value",
              "options": {
                "STABLE": {
                  "color": "green",
                  "index": 0
                },
                "DEGRADED": {
                  "color": "orange",
                  "index": 1
                },
                "UNSTABLE": {
                  "color": "red",
                  "index": 2
                },
                "false": {
                  "text": "DISABLED/FAILED",
                  "color": "red",
                  "index": 3
                },
                "true": {
                  "text": "ENABLED/SUCCESS",
                  "color": "green",
                  "index": 4
                }
              }
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "orange",
                "value": 1
              },
              {
                "value": 2,
                "color": "red"
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CC-Status status {{node_ip}}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Control Cluster Status"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "MC-Status status {{node_ip}}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Manager Cluster Status"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "BKP-Config enabled {{node_ip}}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Backup Config"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "BKP-LastStatus status {{node_ip}}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Last Backup Status"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "MC-Nodes DOWN {{node_ip}}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Manager Nodes DOWN"
              }
            ]
          }
        ]
    },
    "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"CC-Status\") |> filter(fn: (r) => r[\"_field\"] == \"status\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A0"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"MC-Status\") |> filter(fn: (r) => r[\"_field\"] == \"status\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A1"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"BKP-Config\") |> filter(fn: (r) => r[\"_field\"] == \"enabled\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A2"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"BKP-Config\") |> filter(fn: (r) => r[\"_field\"] == \"schedule\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A3"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"BKP-LastStatus\") |> filter(fn: (r) => r[\"_field\"] == \"status\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A4"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "{{datasource_uid}}"
          },
          "query": "from(bucket: \"{{datasource_bucket}}\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"MC-Nodes\") |> filter(fn: (r) => r[\"_field\"] == \"DOWN\") |> filter(fn: (r) => r[\"host\"] == \"{{node_ip}}\") |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n |> yield(name: \"last\")",
          "refId": "A5"
        }
    ],
    "datasource": {
      "type": "influxdb",
      "uid": "{{datasource_uid}}"
    } 
}